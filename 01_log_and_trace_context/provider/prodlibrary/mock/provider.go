// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package providermock is a generated GoMock package.
package providermock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductNameProvider is a mock of ProductNameProvider interface.
type MockProductNameProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProductNameProviderMockRecorder
}

// MockProductNameProviderMockRecorder is the mock recorder for MockProductNameProvider.
type MockProductNameProviderMockRecorder struct {
	mock *MockProductNameProvider
}

// NewMockProductNameProvider creates a new mock instance.
func NewMockProductNameProvider(ctrl *gomock.Controller) *MockProductNameProvider {
	mock := &MockProductNameProvider{ctrl: ctrl}
	mock.recorder = &MockProductNameProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductNameProvider) EXPECT() *MockProductNameProviderMockRecorder {
	return m.recorder
}

// GetProductName mocks base method.
func (m *MockProductNameProvider) GetProductName(ctx context.Context, barcode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductName", ctx, barcode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductName indicates an expected call of GetProductName.
func (mr *MockProductNameProviderMockRecorder) GetProductName(ctx, barcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductName", reflect.TypeOf((*MockProductNameProvider)(nil).GetProductName), ctx, barcode)
}
