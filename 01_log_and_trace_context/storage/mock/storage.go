// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/itiky/practicum-examples/01_log_and_trace_context/model"
)

// MockProductStorer is a mock of ProductStorer interface.
type MockProductStorer struct {
	ctrl     *gomock.Controller
	recorder *MockProductStorerMockRecorder
}

// MockProductStorerMockRecorder is the mock recorder for MockProductStorer.
type MockProductStorerMockRecorder struct {
	mock *MockProductStorer
}

// NewMockProductStorer creates a new mock instance.
func NewMockProductStorer(ctrl *gomock.Controller) *MockProductStorer {
	mock := &MockProductStorer{ctrl: ctrl}
	mock.recorder = &MockProductStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStorer) EXPECT() *MockProductStorerMockRecorder {
	return m.recorder
}

// SaveOrderProductItem mocks base method.
func (m *MockProductStorer) SaveOrderProductItem(ctx context.Context, orderID string, item model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderProductItem", ctx, orderID, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderProductItem indicates an expected call of SaveOrderProductItem.
func (mr *MockProductStorerMockRecorder) SaveOrderProductItem(ctx, orderID, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderProductItem", reflect.TypeOf((*MockProductStorer)(nil).SaveOrderProductItem), ctx, orderID, item)
}
